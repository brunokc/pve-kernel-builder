name: Build pve-kernel

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
      runner:
        type: string
        description: 'target runner for this workflow'
        required: false
        default: 'ubuntu-latest'

env:
  REPO_URL: git://git.proxmox.com/git/pve-kernel.git
  REPO_BRANCH: pve-kernel-5.15
  DEBIAN_RELEASE: bullseye
  UPLOAD_BIN_DIR: true

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        #sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        #sudo wget -qO - http://download.proxmox.com/debian/proxmox-ve-release-6.x.gpg | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add -
        sudo wget http://download.proxmox.com/debian/proxmox-ve-release-6.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg
        sudo chmod +r /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg
        sudo chmod a+w /etc/apt/sources.list
        echo ============== Sudoers
        sudo cat /etc/sudoers
        for f in /etc/sudoers.d/*; do echo $f; sudo cat $f; done
        echo ============== Env:
        printenv | sort
        echo ============== sudo Env:
        sudo printenv | sort
        sudo echo "deb http://download.proxmox.com/debian/pve ${DEBIAN_RELEASE} pve-no-subscription" > /etc/apt/sources.list.d/pve-no-subscription.list \
        #sudo -E echo "deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription" >> /etc/apt/sources.list
        sudo -E apt-get update
        sudo -E apt-get install -y --no-install-recommends git nano screen patch fakeroot build-essential devscripts libncurses5 libncurses5-dev libssl-dev bc flex bison libelf-dev libaudit-dev libgtk2.0-dev libperl-dev asciidoc xmlto gnupg gnupg2 rsync lintian debhelper libdw-dev libnuma-dev libslang2-dev sphinx-common asciidoc-base automake cpio dh-python file gcc kmod libiberty-dev  libtool perl-modules python3-minimal sed tar zlib1g-dev liblz4-tool idn
        sudo -E apt-get autoremove --purge
        sudo -E apt-get clean

    - name: Install proxmox dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get install -y --no-install-recommends libpve-common-perl dwarves

    - name: Clone source code
      run: git clone $REPO_URL -b $REPO_BRANCH pve-kernel

    #- name: Fix lz4 build deps
    #  run: |
    #    cd pve-kernel
    #    #sed -i "s/lz4/liblz4-1/g" debian/control.in

    - name: Prepare and apply patches
      run: |
        cp patches/kernel/*.patch pve-kernel/patches/kernel
        cd pve-kernel
        for patch in ../patches/*.patch; do echo "Applying patch '$patch'" && patch -p1 < ${patch}; done

    #- name: Fix DEBUG_INFO_BTF
    #  run: |
    #    cd pve-kernel
    #    sed -i 's/${LINUX_TOOLS_DBG_DEB}//' Makefile
    #    #sed -i "s/-e CONFIG_PAGE_TABLE_ISOLATION/-e CONFIG_PAGE_TABLE_ISOLATION \\\ \n-d CONFIG_DEBUG_INFO_BTF/" debian/rules

    - name: Free up disk space on CI system
      run: |
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        #sudo apt-get remove -y '^ghc-8.*'
        sudo dpkg --remove '^dotnet-.*'
        sudo dpkg --remove '^temurin-.*-jdk'
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'php.*'
        sudo dpkg --remove google-cloud-sdk azure-cli microsoft-edge-stable google-chrome-stable firefox powershell mono-devel
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
        rm -rf /usr/share/dotnet/
        df -h

    - name: Compile PVE kernel
      id: compile
      run: |
        cd pve-kernel
        echo -e "$(nproc) thread compile"
        #make -j$(nproc) || make -j1 V=s
        make
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Create Release directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      run: |
        cd pve-kernel
        mkdir release
        cp *.deb release/
        #cp *.ddeb release/
        #rm release/*dbgsym*.deb
        #rm release/*dbgsym*.ddeb

    - name: Determine kernel version number for uploading
      id: getversion
      run: |
        cd pve-kernel/build
        echo "version=$(ls abi-[0-9]* | sed 's/abi-prev/pve-kernel/g' | sed 's/-pve//g')" >> $GITHUB_OUTPUT

    - name: Upload kernel directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{ steps.getversion.outputs.version }}
        path: pve-kernel/release

    - name: Start tmate session on failure
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled && failure() }}
